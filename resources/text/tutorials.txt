
C64; Main Commodore 64 tutorials; C64/Tutorials/; <h2>Main Commodore 64 tutorials</h2><p> Recommended starting point for any new user. The tutorials are divided into four categories (and directories):<ul><li>Language introduction</li><li>Easy</li><li>Intermediate</li><li>Advanced</li></ul>The C64 tutorials are a coherent set of well-documented examples that will propel you from a complete beginner to an advanced user of TRSE. The skills you learn here will be applicable to all the other tutorial projects as well.
C64; Ray Tracer Demo Effects; C64/DemoEffects_raytracer/; <h2>The built-in "Fjong" real-time ray tracer for C64 demo effects</h2><br><img src=":resources/images/tutorials/fjong1.png" width="260"><p>The built-in "Fjong" Raytracer enables creation of ray-traced 3D scenes that can be exported to a data format that the C64/Amiga/VIC-20 etc can read. Most of the demos effects created with TRSE used this ray tracer. <p>You program your scenes in Lua, and then run the Fjong 3D program with CTRL+R. In this project, a number of C64 examples have been supplied in order to demonstrate the synergy between the Fjong ray tracer and the TRSE compiler. <p>The lua script language in TRSE has been expanded with a bunch of useful commands for compressing and exporting user-defined 8-bit data.
C64; Game tutorial; C64/TutorialGame_Introduction/; <h2>Simple game tutorial</h2><br><img src=":resources/images/tutorials/trse_game_tuts.png" width="260"><p>Learn how to create a very simple game setup with TRSE! Sprite handling, joystick and level editor.
C64; Rogue Burger One; C64/TutorialGame_RogueBurgerOne/; <h2>Rogue Burger One</h2><br><img src=":resources/images/tutorials/rb1.png" width="300"><br><p>Rogue Burger 1 is a small tutorial game that was <a href="https://leuat.itch.io/rogue-burger-one">released on itch.io</a> in august 2018. <p>The full source code of the game is available, including all the sprites, character sets and levels. <p>The levels were created with the built-in level editor in TRSE.<p>Please note that the source code is not optimized for presentation, since it was written during the early stages of TRSE development. Expect some outdated and messy code.
C64; DemoMaker; C64/DemoMaker/; <h2>Setup for single-file C64 demo</h2><br><img src=":resources/images/tutorials/torus.png" width="200"><p>Sample project for setting up a single-file .prg C64 demo with packed resources, music and scenes + transitions.
C64; Disk loader; C64/Disk_loader_project/; <h2>C64 disk project sample</h2><tr><td><img src=":resources/images/tutorials/floppy.jpeg" width="160"></td><td><br><br>Sample project for setting up a project that loads multiple files from disk.</td></tr>
C64; $4k Dreams; C64/4kDreams/; <h2>$4k (16kb) cracktro example</h2><br><img src=":resources/images/tutorials/4kdreams.png" width="300"><p>Full source included.
C64; 16kb cartridge project; C64/16kb_cartridge_project/; <h2>16kb cartridge project</h2><p>This tutorial shows how to set up / create a 16 kb cartridge project for the commodore 64.<p>Note that for a .crt file to compile, you <b>need to have exomizer compression turned on!</b>
C64; Unit tests; C64/UnitTests/; <h2>TRSE internal unit tests</h2><p>This project contains various unit test files for testing and verifying that the internal MOS6502 arithmetic / methods / dispather stuff is working. Which not everything is. Yet. <p>Not complete, still under construction.


VIC20; Main Vic-20 tutorials; VIC20/tutorials/ ;  <h2>Main Vic-20 tutorials</h2><p>Recommended starting point for anybody interested in coding for the VIC-20. Easy and advanced tutorials. <p>Please note that most of the C64 tutorials / demo effects can also easily be converted to work for the VIC-20.
VIC20; Purple Planet Yo!; VIC20/PurplePlanetYo; <h2>Purple Planet Yo: the VIC-20 Demo</h2><br><img src=":resources/images/tutorials/ppl.png" width="300"><p>Purple Planet Yo is a 32kb demo for the expanded VIC-20. The demo was released on Fj√§lldata in 2019.<p>Full source code included, but the Fjong Raytracer methods that was used to create the 3D effects are not included. We recommend that the motivated user seeks out the Fjong Raytracer tutorials!
VIC20; Vixmas; VIC20/vixmas_demo; <h2>Vixmas (demo)</h2><br><img src=":resources/images/tutorials/vixmas.png" width="300"><p>Vixmas is a small demo for the 24kb expanded Vic-20. Full source code is included.<p>Please note that since the demo uses a weird music player, the project only compiles with the <b>Dasm</b> assembler (and not the internal).
VIC20; Vic Nibbler;  VIC20/VicNibbler; <h2>Vic Nibbler</h2><p>Created by <b>AndyH [ Hewco | Ovine ]</b></p><div><img src=":resources/images/tutorials/nibbler.gif" width="300"></div><p>Vic Nibbler for the VIC-20 with 3K RAM expansion released in 2019. The complete source code for the game is included.  Start with nibbler.ras.  A number of constants, variables and include files are defined in the VAR section.</p><p>To run, install VICE and tell TRSE's configuration where to find the emulator, then press Ctrl+R in the Nibbler.ras source file.  The start address for a 3K expanded game is $0400.</p><p>Find out more at https://hewco.uk</p>
VIC20; PumpKid;  VIC20/PumpKid/; <h2>PumpKid</h2><p>Created by <b>AndyH [ Hewco | Ovine ]</b></p><div><img src=":resources/images/tutorials/pumpkid.png" width="300"></div><p>Pumpkid for the VIC-20 with 16K RAM expansion released in 2019. The complete source code for the game is included.  Start with pumpkid.ras.  A number of constants, variables and include files are defined in the VAR section.</p><p>To run, install VICE and Exomizer 3 and tell TRSE's configuration where to find the emulator and Exomizer, then press Ctrl+R in the Nibbler.ras source file.</p><p>Find out more at https://hewco.uk</p>

CrossPlatform; Grave Intentions; CrossPlat/GraveIntentions; <h2>Grave Intentions</h2>A C64/VIC-20/PET/PLUS4 cross-platform text-based adventure engine/ game. Still under construction.
PLUS4; Main Commodore PLUS/4 tutorials; PLUS4/Tutorials/;<h2>Main Commodore Plus/4 tutorials</h2>Support for the Plus/4 was added in version 0.08, with a bunch of fresh and new tutorials!<br><img src=":resources/images/tutorials/plus4_tut.png" width="300"><p><i>Small disclaimer: </i>Most built-in methods are not yet updated to work for the PLUS/4. This will be added later, within a larger project setting.

X16; Main X16 examples; X16/Tutorials/; <h2>Main Commander X16 tutorials</h2>Please note: These are extremely preliminary examples. X16 support was implemented on sept 13th 2019, so very little is yet possible.
PET; Main Commodore PET tutorials; PET/examples/;<h2>Main Commodore PET tutorials</h2>The official PET tutorials!
OK64; Main OK64 examples ; OK64/Tutorials/; <h2>Main OK64 tutorials</h2>Prelimiary tutorials, prone to change. OK64 is Leuat's very own fake 6502 computer!
OK64; OK Operating System (KOS) ; OK64/KOS/; <h2>KOS: OK64 OS Operating system source</h2>Simple source code for the extremely basic KOS - (O)K Operating System.
Amiga; Main Amiga 500 tutorials; Amiga/tutorials/;<h2>Main Amiga 500 tutorials</h2><p>Amiga 500 tutorials will be overhauled in the 0.09 release. Hopefully.
C128; Main Commodore 128 tutorials; C128/;<h2>Main C128 tutorials</h2><p>C128 tutorials will be overhauled in a future release of TRSE.
NES; Main NES tutorials; NES/intro_tutorial/;<h2>Main NES tutorials</h2><p>NES tutorials will be overhauled in the 0.09 release. Hopefully.
